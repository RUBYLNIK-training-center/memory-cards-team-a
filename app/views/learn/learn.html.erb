<div id="carouselExampleControls" class="carousel" data-bs-keyboard="true" data-bs-interval="false"
  data-bs-touch="true">
  <div class="carousel-indicators">
    <button onclick="functionForIndicators(this)" type="button" data-bs-target="#carouselExampleControls"
      data-bs-slide-to="0" class="active" aria-current="true"></button>
    <button onclick="functionForIndicators(this)" id='forCopy' type="button" data-bs-target="#carouselExampleControls"
      data-bs-slide-to="1"></button>
  </div>
  <div class="carousel-inner">
    <% @cards.each do |card| %>
      <div class="carousel-item bg-light p-5 rounded mt-3">
        <p class="fs-3 fw-bolder" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample"
          aria-expanded="false" aria-controls="collapseExample">
          <%= card.question %>
        </p>

        <div class="collapse" id="collapseExample">
          <div class="card text-dark bg-light">
            <div class="card-body lern" value='<%= card.id %>'>
              <%= markdown(card.answer) %>
            </div>
            <div>
              <div class="d-flex justify-content-center mb-2"><%= t('learn.learn.question') %></div>
              <div class="d-flex justify-content-center">
                <button onclick="myFunction(1)" type="button" class="btn btn-danger">1</button>
                <button onclick="myFunction(2)" type="button" class="btn btn-warning ms-2">2</button>
                <button onclick="myFunction(3)" type="button" class="btn btn-secondary ms-2">3</button>
                <button onclick="myFunction(4)" type="button" class="btn btn-primary ms-2">4</button>
                <button onclick="myFunction(5)" type="button" class="btn btn-success ms-2">5</button>
              </div>
              <div class="d-flex justify-content-center mb-1"><%= t('learn.learn.level') %><% if I18n.locale == :en %>
                <%= card.confidence_level %>
              <% else %>
                <% hash = { "undefined" => "не определено", "very_bad" => "очень плохо", "bad" => "плохо", "medium" => "средне", "good" => "хорошо", "perfect" => "идеально" } %>
                <%= hash[card.confidence_level]%>
              <% end %>
              </div>
            </div>
          </div>
        </div>
      </div>
    <% end %>
  </div>
  <button onclick="functionForCountDown()" class="carousel-control-prev" type="button"
    data-bs-target="#carouselExampleControls" data-bs-slide="prev"></button>
  <button onclick="functionForCountUp()" class="carousel-control-next" type="button"
    data-bs-target="#carouselExampleControls" data-bs-slide="next"></button>
</div>

<script>
  let amount = document.getElementsByClassName('card-body lern').length;
  let count = 0;

  function functionForIndicators(el) {
    count = parseInt(el.getAttribute('data-bs-slide-to'));
    functionForClose();
  }

  function functionForClose() {
    document.querySelectorAll('div.collapse').forEach(el => {
      el.className = 'collapse';
    });
  }

  function functionForCountUp() {
    count += 1;
    if (count == amount) {
      count -= amount
    }
    functionForClose();
  }

  function functionForCountDown() {
    count -= 1;
    if (count == -amount) {
      count += amount;
    }
    functionForClose();
  }

  window.addEventListener('load', function (event) {
    if (document.querySelector("div.container div.carousel div.carousel-inner div.carousel-item") != null) {
      const el = document.querySelector("div.container div.carousel div.carousel-inner div.carousel-item");
      el.classList.add("active");
    }
  });

  function myFunction(num) {
    let card;
    let level;
    if (count >= 0) {
      card = document.getElementsByClassName('card-body lern')[count].getAttribute("value");
      level = document.getElementsByClassName('d-flex justify-content-center mb-1')[count];
    } else if (count < 0) {
      card = document.getElementsByClassName('card-body lern')[amount + count].getAttribute("value");
      level = document.getElementsByClassName('d-flex justify-content-center mb-1')[amount + count];
    }
    let confidence_level = ['undefined', 'very_bad', 'bad', 'medium', 'good', 'perfect'];
    let http = new XMLHttpRequest();
    let params = 'confidence_level=' + confidence_level[num];
    http.open('PATCH', `/cards/${card}`, true);

    //Send the proper header information along with the request
    http.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

    //Call a function when the state changes.
    http.onreadystatechange = function () {
      if (http.readyState == 4 && http.status == 200) {
        level.innerText = "<%= t('learn.learn.level') %>" + http.responseText;
        <% if I18n.locale == :en %>
          level.innerText = "<%= t('learn.learn.level') %>" + http.responseText;
        <% else %>
          const lang = { "undefined": "не определено", "very_bad": "очень плохо", "bad": "плохо", "medium": "средне", "good": "хорошо", "perfect": "идеально" };
          level.innerText = "<%= t('learn.learn.level') %>" + lang[http.responseText];
        <% end %>
      }
    }
    http.send(params);
  }

  window.addEventListener('load', function (event) {
    let indicator = document.getElementsByClassName('carousel-indicators')[0];
    for (let i = 2; i < amount - 1; i++) {
      let el = document.getElementById('forCopy').cloneNode(true);
      el.removeAttribute('id');
      el.setAttribute('data-bs-slide-to', i.toString());
      indicator.append(el);
    }
  });
</script>

<%= link_to t('.back'), boards_path, class: "btn btn-outline-secondary mt-3" %>

